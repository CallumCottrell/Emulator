X-Makina Assembler - Version 1.18 (27 June 2018)
.ASM file: ints.txt

  1	    	     	;
  2	    	     	; Interrupt driven input/output example
  3	    	     	; Input on device 1 and output on device 2
  4	    	     	; L. Hughes
  5	    	     	;
  6	    	     	;  7 July 2018 - LR pushed/pulled before calls to queuing routines in ISRs
  7	    	     	; 20 June 2018
  8	    	     	;
  9	    	     	; Equates
 10	    	     	;
 11	    	     	; Registers:
 12	    	     	;
 13	    	     	PC	equ	R7
 14	    	     	PSW	equ	R6
 15	    	     	SP	equ	R5
 16	    	     	LR	equ	R4
 17	    	     	;
 18	    	     	; PSW priorities and sleep bits
 19	    	     	;
 20	    	     	PRIOR7	equ	#$E0
 21	    	     	PRIOR4	equ	#$80
 22	    	     	PRIOR3	equ	#$60
 23	    	     	SLP	equ	#$8
 24	    	     	;
 25	    	     	; Status/control bits
 26	    	     	;
 27	    	     	DBA	equ	#4	; DBA bit
 28	    	     	IE	equ	#1	; IE bit
 29	    	     	;
 30	    	     	; Queue structure constants
 31	    	     	;
 32	    	     	QUEUE	equ	#0	; Position in IOQueue
 33	    	     	HEAD	equ	#4	; Position in IOQueue
 34	    	     	TAIL	equ	#5	; Position in IOQueue
 35	    	     	;
 36	    	     	; Booleans
 37	    	     	;
 38	    	     	TRUE	equ	#1
 39	    	     	FALSE	equ	#0
 40	    	     	;
 41	    	     	; ***** Device memory
 42	    	     	;
 43	    	     		org	#$2
 44	0002	0001	Dev1SCR	byte	IE
 45	0003	0000	Dev1In	byte	#0
 46	0004	0001	Dev2SCR	byte	IE
 47	0005	0000	Dev2Out	byte	#0
 48	    	     	;
 49	    	     	; ***** Common memory (global)
 50	    	     	;
 51	    	     		org	#$10
 52	0010	0000	IOQueue	bss	#4		; 0: Queue[0..4]
 53	0014	0000		bss	#1		; 4: Head (0..3)
 54	0015	0000		bss	#1		; 5: Tail (0..3)
 55	    	     	;
 56	0016	0000	OutBusy	bss	#1		; 
 57	    	     	;
 58	    	     	; ***** Mainline
 59	    	     	;
 60	    	     		org	#$0100
 61	    	     	Mainline
 62	    	     	; Block all interrupts - by rights, CPU should start with priority 7
 63	0100	9F06		movlz	PRIOR7,PSW
 64	    	     	; Initialize stack pointer
 65	0102	9605		movl	StkTop,SP
 66	0104	A7FD		movh	StkTop,SP
 67	    	     	; Initialize devices
 68	0106	0F7C		bl	InitDevices
 69	    	     	;
 70	    	     	; Enter sleep loop at priority 3
 71	    	     	;
 72	0108	9B06		movlz	PRIOR3,PSW
 73	    	     	MainLoop
 74	010A	74A6		bis	SLP,PSW		; Sleep
 75	010C	3FFE		bal	MainLoop
 76	    	     	;
 77	    	     	; ***** Support routines
 78	    	     	;
 79	    	     		org	#$2000
 80	    	     	; 
 81	    	     	; Device initialization code
 82	    	     	; Assumes priority 7
 83	    	     	;
 84	    	     	InitDevices
 85	2000	9818		movlz	Dev1In,R0
 86	2002	8041		ld.b	R0,R1		; Clear any pending input byte
 87	    	     	;
 88	2004	9080		movl	IOQueue,R0	; R0 refers to IOQueue
 89	2006	A000		movh	IOQueue,R0
 90	    	     	;
 91	2008	9809		movlz	#1,R1
 92	200A	E208		str	R1,R0,HEAD	; IOQueue.Head = 1
 93	200C	9801		movlz	#0,R1
 94	200E	E288		str	R1,R0,TAIL	; IOQueue.Tail = 0
 95	    	     	; 
 96	2010	90B0		movl	OutBusy,R0	; R0 refers to OutBusy
 97	2012	A000		movh	OutBusy,R0	
 98	    	     	;
 99	2014	9001		movl	FALSE,R1
100	2016	8848		st.b	R1,R0		; OutBusy = FALSE
101	    	     	;
102	2018	7627		mov	LR,PC		; Return
103	    	     	;
104	    	     	; ***** Queue software
105	    	     	;
106	    	     		org	#$3000
107	    	     	;
108	    	     	; Enqueue data
109	    	     	; R3 is data to enqueue
110	    	     	; R0 is queue structure
111	    	     	; Return -1 in R3 if queue full; otherwise R3 unchanged
112	    	     	;
113	    	     	Enq
114	    	     	; R1, R2 are volatile - save
115	3000	8E0D		st	R1,-SP
116	3002	8E15		st	R2,-SP
117	    	     	; Initialize R1 (head) and R2 (tail)
118	3004	C201		ldr	R0,HEAD,R1
119	3006	C282		ldr	R0,TAIL,R2
120	    	     	; Check for full queue (head=tail)
121	3008	6A0A		cmp	R1,R2
122	300A	2008		beq	EnqFull
123	    	     	; Store R3 in queue[head]
124	300C	8E05		st	R0,-SP		; R0 to be modified, stack 
125	300E	6008		add	R1,R0		; R0 is address of queue element
126	3010	8858		st.b	R3,R0		; queue[head] = data
127	    	     	; Increment and mask head
128	3012	6089		add	#1,R1		; R1 = 001, 010, 011, 100
129	3014	7299		bic	#4,R1		; R1 = 001, 010, 011, 000
130	    	     	; Save new head
131	3016	8128		ld	SP+,R0		; R0 restored
132	3018	E208		str	R1,R0,HEAD	; IOQueue.Head = updated head
133	301A	3C01		bal	EnqDone
134	    	     	; Queue is full
135	    	     	EnqFull
136	301C	76BB		mov	#-1,R3		; Signal queue full
137	    	     	;
138	    	     	EnqDone
139	    	     	; Restore volatile registers
140	301E	812A		ld	SP+,R2
141	3020	8129		ld	SP+,R1
142	3022	7627		mov	LR,PC		; return
143	    	     	;
144	    	     	; Dequeue data
145	    	     	; R0 is queue structure
146	    	     	; Return result in R1
147	    	     	; If queue is empty, return -1 in R1
148	    	     	Deq
149	    	     	; R2 is volatile - save
150	3024	8E15		st	R2,-SP
151	    	     	; Initialize R1 (head) and R2 (tail)
152	3026	C201		ldr	R0,HEAD,R1
153	3028	C282		ldr	R0,TAIL,R2
154	    	     	; Increment and mask tail
155	302A	608A		add	#1,R2		; R2 = 001, 010, 011, 100
156	302C	729A		bic	#4,R2		; R2 = 001, 010, 011, 000
157	    	     	; Check for empty queue ((tail + 1) = head)
158	302E	6A0A		cmp	R1,R2
159	3030	2006		beq	DeqEmpty
160	    	     	; Queue not empty - R1 = queue[tail]
161	3032	8E05		st	R0,-SP		; R0 to be modified, stack 
162	3034	6010		add	R2,R0		; R0 is address of queue element
163	3036	8041		ld.b	R0,R1		; queue[head] = data
164	    	     	; Save new tail
165	3038	8128		ld	SP+,R0		; R0 restored
166	303A	E290		str	R2,R0,TAIL	; IOQueue.Tail = updated tail
167	303C	3C01		bal	DeqDone
168	    	     	DeqEmpty
169	303E	76B9		mov	#-1,R1
170	    	     	;
171	    	     	DeqDone
172	    	     	; Restore volatile register
173	3040	812A		ld	SP+,R2
174	3042	7627		mov	LR,PC		; return
175	    	     	;
176	    	     	; ***** Interrupt service routines
177	    	     	;
178	    	     		org	#$4000
179	    	     	;
180	    	     	; Device 1 ISR:
181	    	     	; Character arrived on device 1 
182	    	     	; Read character to clear DBA
183	    	     	; If output busy, enqueue, otherwise write to output
184	    	     	;
185	    	     	Dev1ISR
186	    	     	; Save volatile registers
187	4000	8E05		st	R0,-SP	
188	4002	8E0D		st	R1,-SP
189	4004	8E1D		st	R3,-SP
190	    	     	;  R1 refers to Dev1
191	4006	9019		movl	Dev1In,R1
192	4008	A001		movh	Dev1In,R1
193	    	     	; Read input register - will clear DBA and Dev1's interrupt
194	400A	804B		ld.b	R1,R3		; R3 = Dev1In
195	    	     	; Check if Device 2 is busy with output
196	400C	90B1		movl	OutBusy,R1
197	400E	A001		movh	OutBusy,R1
198	    	     	;
199	4010	8048		ld.b	R1,R0		; R0 = OutBusy
200	    	     	;
201	4012	6A88		cmp	TRUE,R0		; Result = R0 - TRUE
202	4014	2006		beq	Dev1OutBusy	; Dev2 is busy with output
203	    	     	; 
204	    	     	; Output is idle - must force output
205	    	     	; Output must change to busy
206	    	     	;
207	4016	9008		movl	TRUE,R0
208	4018	8841		st.b	R0,R1		; OutBusy = TRUE
209	    	     	; Write data to Dev2Out
210	401A	9029		movl	Dev2Out,R1
211	401C	A001		movh	Dev2Out,R1
212	    	     	; Dev2Out = data
213	401E	8859		st.b	R3,R1		; Output should start
214	4020	3C05		bal	Dev1Done
215	    	     	;
216	    	     	; Output is busy - queue character
217	    	     	;
218	    	     	Dev1OutBusy
219	    	     	; Queue char in R3
220	4022	9080		movl	IOQueue,R0
221	4024	A000		movh	IOQueue,R0	; R0 refers to IOQueue
222	    	     	; enq(data)
223	4026	8E25		st	LR,-SP		; Save LR
224	4028	17EB		bl	Enq		; Ignore queue overflow
225	402A	812C		ld	SP+,LR		; Restore LR
226	    	     	; Restore volatile registers
227	    	     	Dev1Done
228	402C	812B		ld	SP+,R3
229	402E	8129		ld	SP+,R1
230	4030	8128		ld	SP+,R0
231	4032	7627		mov	LR,PC
232	    	     	;
233	    	     		org	#$5000
234	    	     	;
235	    	     	; Device 2 ISR
236	    	     	; Character has been sent on device 2
237	    	     	; Check queue for character
238	    	     	; If it exists, continue sending (OutBusy is still TRUE)
239	    	     	; If nothing, set OutBusy to FALSE
240	    	     	;
241	    	     	Dev2ISR
242	    	     	; Save volatile registers
243	5000	8E05		st	R0,-SP
244	5002	8E0D		st	R1,-SP
245	5004	8E1D		st	R3,-SP
246	    	     	; Check queue
247	5006	9080		movl	IOQueue,R0
248	5008	A000		movh	IOQueue,R0	; R0 refers to IOQueue
249	    	     	; deq(data)
250	500A	8E25		st	LR,-SP		; Save LR
251	500C	100B		bl	Deq		; R3 = -1 if empty
252	500E	812C		ld	SP+,LR		; Restore LR
253	5010	6ABB		cmp	#-1,R3		; Result = R3 - (-1)
254	5012	2004		beq	Dev2QueueEmpty
255	    	     	; Write R3 to Dev2Out
256	5014	9029		movl	Dev2Out,R1
257	5016	A001		movh	Dev2Out,R1
258	    	     	; Dev2Out = data
259	5018	8859		st.b	R3,R1		; Output should start
260	501A	3C04		bal	Dev2Done
261	    	     	; Nothing left to send, OutBusy is FALSE
262	    	     	Dev2QueueEmpty
263	501C	90B1		movl	OutBusy,R1
264	501E	A001		movh	OutBusy,R1
265	    	     	;
266	5020	9000		movl	FALSE,R0
267	5022	8841		st.b	R0,R1		; OutBusy = FALSE
268	    	     	;
269	    	     	Dev2Done
270	    	     	; Restore volatile registers
271	5024	812B		ld	SP+,R3
272	5026	8129		ld	SP+,R1
273	5028	8128		ld	SP+,R0
274	502A	7627		mov	LR,PC		; Return
275	    	     	;
276	    	     	; ***** High memory - vector addresses
277	    	     	;
278	    	     		org	#$FFC0
279	    	     	StkTop	
280	    	     	;
281	    	     	; Device 1's vector
282	    	     	;
283	    	     		org	#$FFC4
284	FFC4	0080		word	PRIOR4
285	FFC6	4000		word	Dev1ISR
286	    	     	;
287	    	     	; Device 2's vector
288	    	     	;
289	FFC8	0080		word	PRIOR4
290	FFCA	5000		word	Dev2ISR
291	    	     	;
292	    	     	; Startup/reset vector - ensures PSW.PRI is 7
293	    	     	;
294	    	     		org	#$FFFC
295	FFFC	00E0		word	PRIOR7
296	FFFE	0100		word	Mainline
297	    	     	;
298	    	     		end	Mainline
Successful completion of assembly

** Symbol table **
Name                               	Type	Value	Decimal
Dev2Done                           	LBL	5024	20516
Dev2QueueEmpty                     	LBL	501C	20508
Dev2ISR                            	LBL	5000	20480
Dev1Done                           	LBL	402C	16428
Dev1OutBusy                        	LBL	4022	16418
Dev1ISR                            	LBL	4000	16384
DeqDone                            	LBL	3040	12352
DeqEmpty                           	LBL	303E	12350
Deq                                	LBL	3024	12324
EnqDone                            	LBL	301E	12318
EnqFull                            	LBL	301C	12316
Enq                                	LBL	3000	12288
MainLoop                           	LBL	010A	266
InitDevices                        	LBL	2000	8192
StkTop                             	LBL	FFC0	-64
Mainline                           	LBL	0100	256
OutBusy                            	LBL	0016	22
IOQueue                            	LBL	0010	16
Dev2Out                            	LBL	0005	5
Dev2SCR                            	LBL	0004	4
Dev1In                             	LBL	0003	3
Dev1SCR                            	LBL	0002	2
FALSE                              	LBL	0000	0
TRUE                               	LBL	0001	1
TAIL                               	LBL	0005	5
HEAD                               	LBL	0004	4
QUEUE                              	LBL	0000	0
IE                                 	LBL	0001	1
DBA                                	LBL	0004	4
SLP                                	LBL	0008	8
PRIOR3                             	LBL	0060	96
PRIOR4                             	LBL	0080	128
PRIOR7                             	LBL	00E0	224
LR                                 	REG	0004	4
SP                                 	REG	0005	5
PSW                                	REG	0006	6
PC                                 	REG	0007	7
R7                                 	REG	0007	7
R6                                 	REG	0006	6
R5                                 	REG	0005	5
R4                                 	REG	0004	4
R3                                 	REG	0003	3
R2                                 	REG	0002	2
R1                                 	REG	0001	1
R0                                 	REG	0000	0

.XME file: C:\Users\callu\source\repos\Emulator\Emulator\ints.xme

